[tox]
envlist = py39, py310, py311, lint, security
isolated_build = True

[testenv]
deps =
    pytest
    pytest-cov
    pytest-xdist
    pytest-timeout
    pytest-mock
    fastapi
    uvicorn
    numpy
    torch
    librosa
    scikit-learn
    influxdb
    paho-mqtt
    requests
    psycopg2-binary
    soundfile
    svg.path
    opencv-python
    pyyaml
commands =
    pytest {posargs:tests} --cov=src --cov-report=term --cov-report=xml

[testenv:lint]
deps =
    black
    isort
    mypy
    flake8
    pylint
commands =
    black --check src tests
    isort --check-only src tests
    mypy src tests
    flake8 src tests
    pylint src tests

[testenv:security]
deps =
    bandit
    safety
    pytest-security
commands =
    bandit -r src
    safety check
    pytest {posargs:tests/test_security.py}

[testenv:performance]
deps =
    {[testenv]deps}
    pytest-benchmark
commands =
    pytest {posargs:tests/test_performance.py} --benchmark-autosave --benchmark-compare

[testenv:integration]
deps =
    {[testenv]deps}
commands =
    pytest {posargs:tests/test_integration.py}

[testenv:docs]
deps =
    sphinx
    sphinx-rtd-theme
    sphinx-autodoc-typehints
commands =
    sphinx-build -b html docs/source docs/build/html

[pytest]
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*
markers =
    unit: Unit tests
    integration: Integration tests
    slow: Tests that take a long time to run
    api: Tests for API endpoints
    data: Tests for data collection
    audio: Tests for audio conversion
    rave: Tests for RAVE processing
    vector: Tests for vector generation
    laser: Tests for laser control
    deployment: Tests for deployment
    security: Security tests
    performance: Performance tests

[flake8]
max-line-length = 100
exclude = .tox,*.egg,build,data
select = E,W,F
ignore = E203, W503

[isort]
profile = black
line_length = 100
multi_line_output = 3

[mypy]
python_version = 3.9
warn_return_any = True
warn_unused_configs = True
disallow_untyped_defs = True
disallow_incomplete_defs = True

[coverage:run]
source = src
omit = tests/*

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    raise NotImplementedError
    if __name__ == .__main__.:
    pass
    raise ImportError